class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [defaultdict(int) for _ in range(n)]
        #! dp is a dictionary: {}
        #! ý nghĩa: lưu trữ giống kiểu mảng 2 chiều với phần tử trước là row, sau là column
        count = 0
        #print(dp)
        for i in range(1,n):
            for j in range(i):
                diff = nums[i]-nums[j]
                #! cái current chắc chắn nó sẽ có diff. Giờ chỉ cần check xem mấy thằng đằng sau có diff giống diff current không là được tính là
                #! 1 subsequence
                # if diff in dp[j]: #! nếu như các phần tử trước đó có cùng diff với phần tử hiện tạiL
                dp[i][diff] += (dp[j][diff] + 1) #(1 này là cái current)
                count += dp[j][diff]
        return count

'''
0,1,2,3,4
2,4,6,8,10				

i	j	diff	dp	count
1	0	nums(1)-nums(0)=4-2=2	dp(1,2) = dp(0,2)+1 = 1	0


2	0	nums(2)-nums(0)=6-2=4	dp(2,4)=dp(0,4)+1=1	0
	1	nums(2)-nums(1)=6-4=2	dp(2,2)=dp(1,2)+1=2	1


3	0	nums(3)-nums(0)=8-2=6	dp(3,6)=dp(0,6)+1=1	1
	1	nums(3)-nums(1)=8-4=4	dp(3,4)=dp(1,4)+1=1	1
	2	nums(3)-nums(2)=8-6=2	dp(3,2)=dp(2,2)+1=3	3


4	0	nums(4)-nums(0)=10-2=8	dp(4,8)=dp(0,8)+1=1	3
	1	nums(4)-nums(1)=10-4=6	dp(4,6)=dp(1,6)+1=1	3
	2	nums(4)-nums(2)=10-6=4	dp(4,4)=dp(2,4)+1=2	4
	3	nums(4)-nums(3)=10-8=2	dp(4,2)=dp(3,2)+1=4	7

'''
        #! test 1: [2,4] -> diff = 2 | dp[1][2] = 1 
