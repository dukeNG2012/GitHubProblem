class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
      #! if we dont choose it, go to next start time
      #! if we choose it, we want to make sure 2 conditions:
      #! before endtime < after starttime && the profit is max. 
        jobs = sorted(zip(startTime,endTime,profit))
        cache = {}
        def dfs(i):
            if i == len(jobs): #1 base case:
                return 0
            if i in cache:
                return cache[i]
            
            #! if not include:
            res = dfs(i+1)

            #! if include:
            #1: before endtime < after starttime:
            # j = i+1
            # while(j < len(jobs)):
            #     if jobs[i][1] <= jobs[j][0]:
            #         break
            #     j+=1
            j = bisect.bisect(jobs,(jobs[i][1],-1,-1))
            cache[i] = res = max(res,jobs[i][2]+dfs(j))
            return res
        return dfs(0)
