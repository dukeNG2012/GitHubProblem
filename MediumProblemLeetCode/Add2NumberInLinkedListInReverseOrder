/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode ReverseLinkedList(ListNode head)
    {
        ListNode current, prev, next;
        current = head;
        prev = null;
        next = null;
        while(current != null)
        {
            next = current.next;
            current.next = prev;
            // Dịch lùi lại
            prev = current;
            current = next;
        }
        head = prev;

        return head;
    }
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode first = l1;
        ListNode second = l2;

        ListNode sum = null;
        int carry = 0;

         //SumOfSingleElementInThatPosition = 0;
        while(first != null || second != null || carry == 1)
        {
            int SumOfSingleElementInThatPosition = carry;
            if(first != null)
            {
                SumOfSingleElementInThatPosition += first.val;
            }
            if(second != null)
            {
                SumOfSingleElementInThatPosition += second.val;
            }

            carry = SumOfSingleElementInThatPosition / 10;
            SumOfSingleElementInThatPosition = SumOfSingleElementInThatPosition % 10;


            ListNode NewNode = new ListNode(SumOfSingleElementInThatPosition);
            //NewNode.val = SumOfSingleElementInThatPosition;
            NewNode.next = sum;
            sum = NewNode;
            if(first != null)
            {
                first = first.next;
            }
            if(second != null)
            {
                second = second.next;
            }
        }
        sum = ReverseLinkedList(sum);
        return sum;
    }
}
