/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
//! ĐÃ CHỮA BÀI!
class Solution {
    /*
    Ý tưởng là để con trỏ prev và current lên đầu left và bắt đầu đảo chiều trong
    khoảng cách từ 0 tới right-left-1. 
    */ 
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(head == null || left == right)
        {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        for(int i = 0; i < left-1; ++i)
        {
            prev = prev.next;
        }
        ListNode current = prev.next;
        for(int i = 0; i < right-left; ++i)
        {
            System.out.println("This is my prev data: " + prev.val);
            System.out.println("This is my current.data: " + current.val);
            ListNode newnext = current.next;
            System.out.println("This is my prev data: " + prev.val);
            System.out.println("This is my current.data: " + current.val);
            System.out.println("This is my newnext.data: " + newnext.val);
            current.next = newnext.next;
            newnext.next = prev.next; // nên nhớ rằng prev.next hiện tại vẫn là 2
            prev.next= newnext; // trước đó thì prev.next là 2, giờ thì là 3. 
        }
        return dummy.next;
    }
}
