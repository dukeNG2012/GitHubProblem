class Solution {
    // time limited so we use dp instead
    // int path(int m, int n)
    // {
    //     if(m-1 < 0 || n-1< 0)
    //     {
    //         return 0;
    //     }
    //     if(m-1 == 0 && n-1 == 0)
    //     {
    //         return 1;
    //     }
    //     return path(m-1,n) + path(m,n-1);
    // }
    public int uniquePaths(int m, int n) {
        int [][] dp =  new int[m][n];
        for(int i = 0; i < m; ++i)
        {
            dp[i][0] = 1;
        }
        for(int j = 0; j < n; ++j)
        {
            dp[0][j] = 1;
        }

        for(int  i = 1; i < m; ++i)
        {
            for(int j = 1; j < n; ++j)
            {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}
